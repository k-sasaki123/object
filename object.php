<?php
class Shopping {
   public $item =  "コンピュータ"; //プロパティ(変数)
   // アクセス修飾子 publicは外部からに成約をつけられるアクセス可能
   private $price = 99800;
   // privateは外部からアクセスできない プロパティに成約をつけられる

   public function getTotal() { //メソッド(関数)
     $tax = $this->price * 0.05;
     // $thisは"自クラスの"を表す定義済み変数 アロー演算子->プロパティ
     
     $price = 10000; // プロパティではなく、関数内のローカルな変数(別物)
     return $this->price + $tax + $price;   // 税込価格の設定 10000足したので114790円になる
    }
  } 

  // オブジェクトの使い方
  $result = new Shopping();  
  //new演算子で実体化する必要がある(インスタンス化)→変数に代入す。
  //この変数はオブジェクト(クラスの機能を全て持った実態＝インスタンス)
  
  $item = $result->item; //publicなプロパティ
  //$nedan = $result->price;  //privateなプロパティ(エラー)
  
   print("$item の会計は".$result->getTotal()."円になります\n");
   
?>

<!-- インスタンスは複数作れるので、商品ごとに別々にコード化できる。
変数は値の保持のみ
関数は機能の提供のみ
オブジェクトは値の保持と、昨日の提供を行う。

例)カート
  売価をUSD→JPYに変える処理
  在庫を購入時に取得しにくい処理
  購入者のクーポンを取得しに行く処理
  ※使う変数は共通だが、処理が多岐にわたる場合はオブジェクトが有利。 -->

